package com.google.api.client.testing.util;

import com.google.api.client.util.SecurityUtils;
import com.lenovo.anyshare.InterfaceC18296pxc;
import com.reader.office.java.awt.geom.Path2D;
import java.security.GeneralSecurityException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

/* loaded from: classes4.dex */
public final class SecurityTestUtils {
    public static final byte[] ENCODED_PRIVATE_KEY = {48, -126, 2, 118, 2, 1, 0, 48, 13, 6, 9, 42, -122, InterfaceC18296pxc.oa, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 2, Path2D.SERIAL_SEG_CLOSE, 48, -126, 2, InterfaceC18296pxc.Ca, 2, 1, 0, 2, -127, -127, 0, -89, 33, 8, -124, 110, -60, InterfaceC18296pxc.za, 8, -62, 69, 120, InterfaceC18296pxc.Fa, -59, -43, 13, -18, 123, 29, -31, 13, -80, -76, 109, -62, -79, 2, 104, -94, 76, 59, -73, -26, 99, 123, -57, -92, -100, 116, InterfaceC18296pxc.S, -25, Path2D.SERIAL_SEG_CLOSE, InterfaceC18296pxc.V, 124, InterfaceC18296pxc.Fa, 76, -59, -84, InterfaceC18296pxc.ma, 27, 0, InterfaceC18296pxc.oa, -63, InterfaceC18296pxc.va, -77, -2, -107, -66, -32, -119, 27, -95, InterfaceC18296pxc.W, -44, -89, 1, InterfaceC18296pxc.na, 44, 7, -55, 126, 5, -78, InterfaceC18296pxc.xa, -105, -114, 65, -19, 58, -78, -95, 0, 118, 83, 76, -88, 2, -21, Byte.MAX_VALUE, 64, 74, -103, -114, -127, -70, -81, -127, 125, -37, 21, 113, 20, -102, InterfaceC18296pxc.O, -37, -111, -97, Path2D.SERIAL_PATH_END, -127, 32, InterfaceC18296pxc.xa, -80, 105, 18, -19, 107, -73, -50, -97, 11, -23, -59, -107, -107, 83, -25, 15, -93, -21, 2, 3, 1, 0, 1, 2, -127, Byte.MIN_VALUE, InterfaceC18296pxc.N, -34, -104, 26, -40, -41, -44, -29, -35, -123, -7, -110, -73, -106, 80, -5, -118, 24, -38, 66, -54, -93, -54, -104, 43, -62, -48, 122, -14, -41, InterfaceC18296pxc.wa, 18, -53, 109, 22, -113, 44, 77, -116, 7, 10, -43, -61, 43, -40, -61, 76, 19, -11, -89, InterfaceC18296pxc.P, 80, -72, 113, -86, InterfaceC18296pxc.ma, -23, 27, 113, InterfaceC18296pxc.F, -1, 42, 48, InterfaceC18296pxc.va, -80, 30, 86, 36, -124, -22, InterfaceC18296pxc.ra, -44, InterfaceC18296pxc.xa, -40, 31, -41, -44, -16, -74, InterfaceC18296pxc.wa, 61, -122, -22, 10, -31, 78, InterfaceC18296pxc.Ca, -123, -77, 12, -80, InterfaceC18296pxc.ea, -52, 68, -46, -17, 67, 124, -78, -23, -105, -77, -2, InterfaceC18296pxc.za, -16, -12, -56, -51, 26, 102, InterfaceC18296pxc.O, 39, -61, -13, -79, -65, -5, 126, InterfaceC18296pxc.ma, 29, 31, 104, -109, 65, -23, -69, 23, -7, 2, 65, 0, -42, 18, 101, 10, -21, InterfaceC18296pxc.F, 107, -3, -114, -29, -40, 76, 107, -122, InterfaceC18296pxc.I, 8, -58, -32, -12, 55, -4, -61, -66, InterfaceC18296pxc.Ba, -56, -50, 78, -124, 11, -49, -62, -121, -56, InterfaceC18296pxc.ma, -92, InterfaceC18296pxc.Aa, 32, -112, 49, 26, -99, 113, 44, 26, 42, -99, -40, -123, 17, InterfaceC18296pxc.Da, 114, 125, InterfaceC18296pxc.D, -118, -32, 125, -64, 61, 58, -58, -105, -105, -39, InterfaceC18296pxc.Da, 2, 65, 0, -57, -36, -22, -107, -42, -79, 0, -118, 121, -76, 120, InterfaceC18296pxc.U, 110, Byte.MAX_VALUE, 115, 68, -86, -4, Path2D.SERIAL_SEG_CLOSE, -50, InterfaceC18296pxc.oa, -60, -57, 125, InterfaceC18296pxc.Z, 21, -81, -44, 25, 112, -75, 83, InterfaceC18296pxc.Z, -55, 61, 24, 28, -112, -103, -8, 120, 110, -52, -108, -41, -76, -96, InterfaceC18296pxc.xa, -117, 69, 0, 64, 26, 4, 122, 13, 6, -106, 112, -51, -1, InterfaceC18296pxc.ra, 117, -25, 2, 64, Byte.MAX_VALUE, 68, 60, 81, -5, 110, 41, -1, 122, InterfaceC18296pxc.Da, -74, -113, -24, InterfaceC18296pxc.U, -65, -60, InterfaceC18296pxc.oa, 8, 32, -24, -48, 26, -57, InterfaceC18296pxc.G, -26, 0, -48, -24, -21, -28, -66, InterfaceC18296pxc.P, -33, InterfaceC18296pxc.fa, 48, 34, 108, -51, -116, -125, -40, 42, 26, 32, 12, InterfaceC18296pxc.pa, -1, 25, 77, InterfaceC18296pxc.T, -109, 7, 22, -124, InterfaceC18296pxc.ra, -26, InterfaceC18296pxc.S, -51, -76, 13, -80, -66, 19, -7, 2, 65, 0, -90, 99, -20, 68, -4, -84, -11, -105, 83, -123, -124, -63, -103, -16, -81, 101, 78, -72, -72, InterfaceC18296pxc.Ba, 100, -57, -74, -111, 49, 18, InterfaceC18296pxc.W, 4, -19, 125, 32, -24, 125, -26, 100, -33, -117, 0, 115, -65, 33, 124, -107, 3, -95, -91, 118, 12, 12, 29, 80, -3, 12, -20, 7, InterfaceC18296pxc.U, -118, -12, 122, InterfaceC18296pxc.qa, 117, -81, -112, -89, 2, 64, InterfaceC18296pxc.Da, -21, -52, -110, -54, -9, InterfaceC18296pxc.ra, -123, 105, 125, -56, InterfaceC18296pxc.qa, -77, -26, 125, -123, -69, InterfaceC18296pxc.ea, -2, InterfaceC18296pxc.ra, 8, InterfaceC18296pxc.oa, -76, -67, 5, 33, -121, 1, -42, -17, 29, 69, -20, -68, -26, -23, InterfaceC18296pxc.Fa, -7, -70, -50, -10, 58, 16, -15, -89, -24, -121, -14, -72, -127, -89, -63, 66, 7, 77, -89, -54, -95, -90, InterfaceC18296pxc.N, -44, -118, 69, -1};
    public static final byte[] ENCODED_PUBLIC_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, InterfaceC18296pxc.oa, -122, -9, 13, 1, 1, 1, 5, 0, 3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -89, 33, 8, -124, 110, -60, InterfaceC18296pxc.za, 8, -62, 69, 120, InterfaceC18296pxc.Fa, -59, -43, 13, -18, 123, 29, -31, 13, -80, -76, 109, -62, -79, 2, 104, -94, 76, 59, -73, -26, 99, 123, -57, -92, -100, 116, InterfaceC18296pxc.S, -25, Path2D.SERIAL_SEG_CLOSE, InterfaceC18296pxc.V, 124, InterfaceC18296pxc.Fa, 76, -59, -84, InterfaceC18296pxc.ma, 27, 0, InterfaceC18296pxc.oa, -63, InterfaceC18296pxc.va, -77, -2, -107, -66, -32, -119, 27, -95, InterfaceC18296pxc.W, -44, -89, 1, InterfaceC18296pxc.na, 44, 7, -55, 126, 5, -78, InterfaceC18296pxc.xa, -105, -114, 65, -19, 58, -78, -95, 0, 118, 83, 76, -88, 2, -21, Byte.MAX_VALUE, 64, 74, -103, -114, -127, -70, -81, -127, 125, -37, 21, 113, 20, -102, InterfaceC18296pxc.O, -37, -111, -97, Path2D.SERIAL_PATH_END, -127, 32, InterfaceC18296pxc.xa, -80, 105, 18, -19, 107, -73, -50, -97, 11, -23, -59, -107, -107, 83, -25, 15, -93, -21, 2, 3, 1, 0, 1};

    public static byte[] newEncodedRsaPrivateKeyBytes() {
        return (byte[]) ENCODED_PRIVATE_KEY.clone();
    }

    public static byte[] newEncodedRsaPublicKeyBytes() {
        return (byte[]) ENCODED_PUBLIC_KEY.clone();
    }

    public static RSAPrivateKey newRsaPrivateKey() throws GeneralSecurityException {
        return (RSAPrivateKey) SecurityUtils.getRsaKeyFactory().generatePrivate(new PKCS8EncodedKeySpec(ENCODED_PRIVATE_KEY));
    }

    public static RSAPublicKey newRsaPublicKey() throws GeneralSecurityException {
        return (RSAPublicKey) SecurityUtils.getRsaKeyFactory().generatePublic(new X509EncodedKeySpec(ENCODED_PUBLIC_KEY));
    }
}
